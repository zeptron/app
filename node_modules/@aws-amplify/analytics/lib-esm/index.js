/*
 * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance with
 * the License. A copy of the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions
 * and limitations under the License.
 */
import AnalyticsClass from './Analytics';
import Amplify, { ConsoleLogger as Logger, Hub, } from '@aws-amplify/core';
var logger = new Logger('Analytics');
var endpointUpdated = false;
var authConfigured = false;
var analyticsConfigured = false;
var _instance = null;
if (!_instance) {
    logger.debug('Create Analytics Instance');
    _instance = new AnalyticsClass();
}
var Analytics = _instance;
Amplify.register(Analytics);
export default Analytics;
export { AnalyticsClass };
export * from './Providers';
var listener = function (capsule) {
    var channel = capsule.channel, payload = capsule.payload, source = capsule.source;
    logger.debug('on hub capsule ' + channel, payload);
    switch (channel) {
        case 'auth':
            authEvent(payload);
            break;
        case 'storage':
            storageEvent(payload);
            break;
        case 'analytics':
            analyticsEvent(payload);
            break;
        default:
            break;
    }
};
var storageEvent = function (payload) {
    var _a = payload.data, attrs = _a.attrs, metrics = _a.metrics;
    if (!attrs)
        return;
    if (analyticsConfigured) {
        Analytics.record({
            name: 'Storage',
            attributes: attrs,
            metrics: metrics,
        }).catch(function (e) {
            logger.debug('Failed to send the storage event automatically', e);
        });
    }
};
var authEvent = function (payload) {
    var event = payload.event;
    if (!event) {
        return;
    }
    switch (event) {
        case 'signIn':
            if (authConfigured && analyticsConfigured) {
                Analytics.record({
                    name: '_userauth.sign_in',
                }).catch(function (e) {
                    logger.debug('Failed to send the sign in event automatically', e);
                });
            }
            break;
        case 'signUp':
            if (authConfigured && analyticsConfigured) {
                Analytics.record({
                    name: '_userauth.sign_up',
                }).catch(function (e) {
                    logger.debug('Failed to send the sign up event automatically', e);
                });
            }
            break;
        case 'signOut':
            break;
        case 'signIn_failure':
            if (authConfigured && analyticsConfigured) {
                Analytics.record({
                    name: '_userauth.auth_fail',
                }).catch(function (e) {
                    logger.debug('Failed to send the sign in failure event automatically', e);
                });
            }
            break;
        case 'configured':
            authConfigured = true;
            if (authConfigured && analyticsConfigured) {
                sendEvents();
            }
            break;
    }
};
var analyticsEvent = function (payload) {
    var event = payload.event;
    if (!event)
        return;
    switch (event) {
        case 'pinpointProvider_configured':
            analyticsConfigured = true;
            if (authConfigured && analyticsConfigured) {
                sendEvents();
            }
            break;
    }
};
var sendEvents = function () {
    var config = Analytics.configure();
    if (!endpointUpdated && config['autoSessionRecord']) {
        Analytics.updateEndpoint({ immediate: true }).catch(function (e) {
            logger.debug('Failed to update the endpoint', e);
        });
        endpointUpdated = true;
    }
    Analytics.autoTrack('session', {
        enable: config['autoSessionRecord'],
    });
};
Hub.listen('auth', listener);
Hub.listen('storage', listener);
Hub.listen('analytics', listener);
//# sourceMappingURL=index.js.map
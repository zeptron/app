{"ast":null,"code":"import _objectWithoutProperties from \"/Users/j/a/z/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/j/a/z/app/src/components/Buttons/Button.js\";\nimport React from 'react';\nimport ButtonStyle from './Button.style';\nimport { FormattedMessage } from 'react-intl';\n\nconst Button = (_ref) => {\n  let type = _ref.type,\n      size = _ref.size,\n      title = _ref.title,\n      intlButtonId = _ref.intlButtonId,\n      colors = _ref.colors,\n      variant = _ref.variant,\n      icon = _ref.icon,\n      disabled = _ref.disabled,\n      iconPosition = _ref.iconPosition,\n      iconStyle = _ref.iconStyle,\n      onClick = _ref.onClick,\n      loader = _ref.loader,\n      loaderColor = _ref.loaderColor,\n      isLoading = _ref.isLoading,\n      className = _ref.className,\n      fullwidth = _ref.fullwidth,\n      style = _ref.style,\n      props = _objectWithoutProperties(_ref, [\"type\", \"size\", \"title\", \"intlButtonId\", \"colors\", \"variant\", \"icon\", \"disabled\", \"iconPosition\", \"iconStyle\", \"onClick\", \"loader\", \"loaderColor\", \"isLoading\", \"className\", \"fullwidth\", \"style\"]);\n\n  // Checking button loading state\n  const buttonIcon = isLoading !== false ? /*#__PURE__*/React.createElement(React.Fragment, null, loader ? loader : 'loading....') : icon && /*#__PURE__*/React.createElement(\"span\", {\n    className: \"btn-icon\",\n    style: iconStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }\n  }, icon); // set icon position\n\n  const position = iconPosition || 'right';\n  return /*#__PURE__*/React.createElement(ButtonStyle, Object.assign({\n    type: type,\n    className: \"reusecore__button \".concat(disabled ? 'disabled' : '', \" \").concat(isLoading ? 'isLoading' : '', \" \").concat(className ? className : '').trim(),\n    icon: icon,\n    disabled: disabled,\n    \"icon-position\": position,\n    onClick: onClick,\n    colors: colors,\n    variant: variant,\n    fullwidth: fullwidth,\n    style: style,\n    size: size\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }\n  }), position === 'left' && buttonIcon, title && !isLoading && /*#__PURE__*/React.createElement(\"span\", {\n    className: \"btn-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(FormattedMessage, {\n    id: intlButtonId ? intlButtonId : 'intlButtonId',\n    defaultMessage: title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 11\n    }\n  })), position === 'right' && buttonIcon);\n};\n\nButton.defaultProps = {\n  disabled: false,\n  isLoading: false,\n  type: 'button'\n};\nexport default Button;","map":{"version":3,"sources":["/Users/j/a/z/app/src/components/Buttons/Button.js"],"names":["React","ButtonStyle","FormattedMessage","Button","type","size","title","intlButtonId","colors","variant","icon","disabled","iconPosition","iconStyle","onClick","loader","loaderColor","isLoading","className","fullwidth","style","props","buttonIcon","position","trim","defaultProps"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,gBAAxB;AACA,SAASC,gBAAT,QAAiC,YAAjC;;AAEA,MAAMC,MAAM,GAAG,UAmBT;AAAA,MAlBJC,IAkBI,QAlBJA,IAkBI;AAAA,MAjBJC,IAiBI,QAjBJA,IAiBI;AAAA,MAhBJC,KAgBI,QAhBJA,KAgBI;AAAA,MAfJC,YAeI,QAfJA,YAeI;AAAA,MAdJC,MAcI,QAdJA,MAcI;AAAA,MAbJC,OAaI,QAbJA,OAaI;AAAA,MAZJC,IAYI,QAZJA,IAYI;AAAA,MAXJC,QAWI,QAXJA,QAWI;AAAA,MAVJC,YAUI,QAVJA,YAUI;AAAA,MATJC,SASI,QATJA,SASI;AAAA,MARJC,OAQI,QARJA,OAQI;AAAA,MAPJC,MAOI,QAPJA,MAOI;AAAA,MANJC,WAMI,QANJA,WAMI;AAAA,MALJC,SAKI,QALJA,SAKI;AAAA,MAJJC,SAII,QAJJA,SAII;AAAA,MAHJC,SAGI,QAHJA,SAGI;AAAA,MAFJC,KAEI,QAFJA,KAEI;AAAA,MADDC,KACC;;AACJ;AACA,QAAMC,UAAU,GACdL,SAAS,KAAK,KAAd,gBACE,0CAAGF,MAAM,GAAGA,MAAH,GAAY,aAArB,CADF,GAGEL,IAAI,iBACF;AAAM,IAAA,SAAS,EAAC,UAAhB;AAA2B,IAAA,KAAK,EAAEG,SAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGH,IADH,CALN,CAFI,CAaJ;;AACA,QAAMa,QAAQ,GAAGX,YAAY,IAAI,OAAjC;AAEA,sBACE,oBAAC,WAAD;AACE,IAAA,IAAI,EAAER,IADR;AAEE,IAAA,SAAS,EAAE,4BAAqBO,QAAQ,GAAG,UAAH,GAAgB,EAA7C,cACTM,SAAS,GAAG,WAAH,GAAiB,EADjB,cAEPC,SAAS,GAAGA,SAAH,GAAe,EAFjB,EAEsBM,IAFtB,EAFb;AAKE,IAAA,IAAI,EAAEd,IALR;AAME,IAAA,QAAQ,EAAEC,QANZ;AAOE,qBAAeY,QAPjB;AAQE,IAAA,OAAO,EAAET,OARX;AASE,IAAA,MAAM,EAAEN,MATV;AAUE,IAAA,OAAO,EAAEC,OAVX;AAWE,IAAA,SAAS,EAAEU,SAXb;AAYE,IAAA,KAAK,EAAEC,KAZT;AAaE,IAAA,IAAI,EAAEf;AAbR,KAcMgB,KAdN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAgBGE,QAAQ,KAAK,MAAb,IAAuBD,UAhB1B,EAiBGhB,KAAK,IAAI,CAACW,SAAV,iBACC;AAAM,IAAA,SAAS,EAAC,UAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,gBAAD;AACE,IAAA,EAAE,EAAEV,YAAY,GAAGA,YAAH,GAAkB,cADpC;AAEE,IAAA,cAAc,EAAED,KAFlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAlBJ,EAyBGiB,QAAQ,KAAK,OAAb,IAAwBD,UAzB3B,CADF;AA6BD,CAhED;;AAkEAnB,MAAM,CAACsB,YAAP,GAAsB;AACpBd,EAAAA,QAAQ,EAAE,KADU;AAEpBM,EAAAA,SAAS,EAAE,KAFS;AAGpBb,EAAAA,IAAI,EAAE;AAHc,CAAtB;AAMA,eAAeD,MAAf","sourcesContent":["import React from 'react';\nimport ButtonStyle from './Button.style';\nimport { FormattedMessage } from 'react-intl';\n\nconst Button = ({\n  type,\n  size,\n  title,\n  intlButtonId,\n  colors,\n  variant,\n  icon,\n  disabled,\n  iconPosition,\n  iconStyle,\n  onClick,\n  loader,\n  loaderColor,\n  isLoading,\n  className,\n  fullwidth,\n  style,\n  ...props\n}) => {\n  // Checking button loading state\n  const buttonIcon =\n    isLoading !== false ? (\n      <>{loader ? loader : 'loading....'}</>\n    ) : (\n      icon && (\n        <span className='btn-icon' style={iconStyle}>\n          {icon}\n        </span>\n      )\n    );\n\n  // set icon position\n  const position = iconPosition || 'right';\n\n  return (\n    <ButtonStyle\n      type={type}\n      className={`reusecore__button ${disabled ? 'disabled' : ''} ${\n        isLoading ? 'isLoading' : ''\n      } ${className ? className : ''}`.trim()}\n      icon={icon}\n      disabled={disabled}\n      icon-position={position}\n      onClick={onClick}\n      colors={colors}\n      variant={variant}\n      fullwidth={fullwidth}\n      style={style}\n      size={size}\n      {...props}\n    >\n      {position === 'left' && buttonIcon}\n      {title && !isLoading && (\n        <span className='btn-text'>\n          <FormattedMessage\n            id={intlButtonId ? intlButtonId : 'intlButtonId'}\n            defaultMessage={title}\n          />\n        </span>\n      )}\n      {position === 'right' && buttonIcon}\n    </ButtonStyle>\n  );\n};\n\nButton.defaultProps = {\n  disabled: false,\n  isLoading: false,\n  type: 'button',\n};\n\nexport default Button;\n"]},"metadata":{},"sourceType":"module"}